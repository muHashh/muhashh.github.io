{"version":3,"sources":["components/Navbar.js","components/Footer.js","components/Projects.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","useState","isTop","setIsTop","isNavbarToggled","setIsNavbarToggled","useEffect","document","addEventListener","istop","window","scrollY","sendRequest","useCallback","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","onClick","id","querySelector","scrollIntoView","behavior","Footer","Projects","imgStyle","maxHeight","maxWidth","cardStyle","paddingTop","paddingBottom","class","style","src","alt","App","title","icon","faGithub","size","faLinkedin","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a19bcee8.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\n\nconst Navbar = (props) => {\n\n  const [isTop, setIsTop] = useState(true);\n  const [isNavbarToggled, setIsNavbarToggled] = useState(false);\n\n  useEffect(() => {\n    document.addEventListener(\"scroll\", () => {\n      const istop = window.scrollY < 20;\n      if (istop !== isTop) {\n        setIsTop(istop);\n      }\n    });\n  }, [isTop]);\n\n  const sendRequest = useCallback(() => {\n    setIsNavbarToggled(true); // Once navbar has been opened, it's always transparent\n  }, [])\n\n  return (\n\n    // Navbar\n    <nav\n      className={`navbar navbar-expand-lg fixed-top navbar-dark\n        ${(isNavbarToggled || !isTop) ? \"transparent\" : \"bg-transparent\"} \n      `}\n    >\n      <a className=\"navbar-brand\" href=\"/\">\n        Home\n      </a>\n\n      {/* Hamburger Menu toggle */}\n      <button\n        className=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarTogglerDemo02\"\n        aria-controls=\"navbarTogglerDemo02\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n        onClick={sendRequest}\n      >\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n\n      {/* Collapsible content */}\n      <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n        <ul className=\"nav navbar-nav mr-auto mt-2 mt-lg-0\">\n          <li \n            className=\"nav-item\"\n            data-toggle=\"collapse\"\n            data-target=\".navbar-collapse.show\">\n              <a\n                className=\"nav-link lead\"\n                href=\"#projects\"\n                onClick={() => {\n                  const anchor = document.querySelector('#projects');\n                  anchor.scrollIntoView({ behavior: 'smooth',});\n                }}>\n                <b>Projects</b>\n              </a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <footer className=\"dark container-fluid p-4 text-center text-light\">\n      <p> \n        Site construction in <a href=\"https://github.com/muHashh/muhashh.github.io\" className=\"App-link\">progress</a>\n      </p>\n      <p>Made by me using React and Bootstrap</p>\n    </footer>\n  );\n}\n\nexport default Footer;","import React from \"react\";\n\nfunction Projects() {\n\n    const imgStyle = {\n        maxHeight: '150px',\n        maxWidth: '100px',\n    };\n\n    const cardStyle = {\n        // maxWidth: \"18rem\",\n        paddingTop:\"7mm\",\n        paddingBottom:\"7mm\",\n    }\n\n    return (\n        <div className=\"jumbotron bg-dark jumbotron-fluid p-4 m-0\" id=\"projects\">\n\n            <div class=\"container container-fluid\">\n\n                <div className=\"display-4 text-center text-light p-4 pb-5 pt-5\">\n                    Projects\n                </div>\n\n                <div className=\"row\">\n\n                    <div class=\"pb-5\">\n                        <div class=\"card text-light shadow-lg dark mb-3\" style={cardStyle}>\n                        <img class=\"card-img-top mx-auto d-block\" src=\"https://avatars0.githubusercontent.com/u/39052374?s=400&v=4\" style={imgStyle} alt=\"Havoc OS\"/>\n                        <br/> <br/>\n                        <div class=\"card-body\">\n                            <h5 class=\"card-title\"><b>About</b></h5>\n                            <p class=\"card-text\">\n                                Havoc-OS 3.x is based on AOSP, inspired by Google Pixel.\n                                Has a refined Material Design 2 UI crafted by @SKULSHADY.\n                                Many useful features that will blow your mind.\n                                All you can dream of and all you'll ever need.\n                            </p>\n                            <br/>\n                            <h5 class=\"card-title\"><b>Links</b></h5>\n                            <a href=\"https://mega.nz/folder/f4d3jC6b#Q2xDoEQvShPbzhnPe0F5hQ\" className=\"App-link\">Download</a>\n                            <a href=\"https://forum.xda-developers.com/galaxy-s8/samsung-galaxy-s8--s8-cross-device-development/havoc-os-3-x-t4088681\" className=\"App-link\">XDA page</a>\n                        </div>\n                        </div>\n                    </div>\n\n                    <div class=\"pb-5\">\n                        <div class=\"card text-light shadow-lg dark mb-3\" style={cardStyle}>\n                        <img class=\"card-img-top mx-auto d-block\" src=\"https://img.xda-cdn.com/BBd2bXc1VPgMHAVuHN-WE47kUQo=/https%3A%2F%2Fraw.githubusercontent.com%2FDerpFest-OP5T%2Fplatform_packages_apps_Settings%2Ff8ad7bd7fa9e98459456c125bbdb44cd28d1d9f0%2Fres%2Fdrawable-nodpi%2Fderp_about.png\" style={imgStyle} alt=\"Derpfest\"/>\n                        <br/> <br/>\n                        <div class=\"card-body\">\n                            <h5 class=\"card-title\"><b>About</b></h5>\n                            <p class=\"card-text\">DerpFest OS is a custom ROM that incorporates the best features around and longs to support the community with its own unique features and contributions.</p>\n                            <br/>\n                            <h5 class=\"card-title\"><b>Links</b></h5>\n                            <a href=\"https://mega.nz/folder/fx8hBKCQ#ZZHdsWYgjZfXGgle1_Q3mw\" className=\"App-link\">Download</a>\n                            <a href=\"https://forum.xda-developers.com/galaxy-s8/samsung-galaxy-s8--s8-cross-device-development/android-10-derpfest-t4097381\" className=\"App-link\">XDA page</a>\n                        </div>\n                        </div>\n                    </div>\n\n                    <div class=\"pb-5\">\n                        <div class=\"card text-light shadow-lg dark mb-3\" style={cardStyle}>\n                        <img class=\"card-img-top mx-auto d-block\" src=\"https://obashi.co.uk/obashi-website.jpg\" style={imgStyle} alt=\"Obashi\"/>\n                        <br/> <br/>\n                        <div class=\"card-body\">\n                            <h5 class=\"card-title\"><b>About</b></h5>\n                            <p class=\"card-text\">\n                            One of the first AR indoor navigation Android apps to utilise Google’s \n                            ARCore’s and Unity’s SLAM capabilities as well as the ZXing API to \n                            accurately map and track users within a few centimetres. \n                            Location nodes were hosted on a LAMP server provided by Obashi, the recipient of the app.\n                            </p>\n                            <br/>\n                            <h5 class=\"card-title\"><b>Links</b></h5>\n                            <a href=\"https://github.com/muHashh/OBASHI-Android-App\" className=\"App-link\">GitHub Source</a>\n                        </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n        </div>\n  );\n}\n\nexport default Projects;","import React from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\nimport Projects from \"./components/Projects\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\nimport { faLinkedin } from '@fortawesome/free-brands-svg-icons'\n\nfunction App() {\n\n  document.title = \"Homepage\";\n\n  return (\n    <div>\n      <header className=\"App-header\">\n        <Navbar/>\n      </header>\n\n      <div className=\"bgstyle\">\n        <div\n          className=\"title jumbotron jumbotron-fluid bg-transparent text-light min-vh-100 d-flex align-content-center align-items-center flex-wrap m-0\"\n        >\n          <div className=\"container container-fluid text-center \">\n            \n            <h1 className=\"display-1\">\n              Hassan Shahid\n            </h1>\n\n            <br/>\n            \n            <p>Computer Science and Physics student at the University of Glasgow</p>\n            \n            <br/><br/><br/><br/>\n\n            <a href=\"https://github.com/muhashh\" className=\"fa-link\">\n              <FontAwesomeIcon icon={faGithub} size=\"3x\"/> \n            </a>\n\n            <a href=\"https://www.linkedin.com/in/hassan-shahid0/\" className=\"fa-link\">\n              <FontAwesomeIcon icon={faLinkedin} size=\"3x\"/> \n            </a>\n          </div>\n\n        </div>\n      </div>\n\n      <Projects/>\n\n      <Footer/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}