{"version":3,"sources":["components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","useState","isTop","setIsTop","isNavbarToggled","setIsNavbarToggled","useEffect","document","addEventListener","istop","window","scrollY","sendRequest","useCallback","className","href","type","onClick","id","querySelector","scrollIntoView","behavior","App","title","icon","faGithub","size","faLinkedin","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wNAqEeA,EAnEA,SAACC,GAEd,MAA0BC,oBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8CF,oBAAS,GAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KAEAC,qBAAU,WACRC,SAASC,iBAAiB,UAAU,WAClC,IAAMC,EAAQC,OAAOC,QAAU,GAC3BF,IAAUP,GACZC,EAASM,QAGZ,CAACP,IAEJ,IAAMU,EAAcC,uBAAY,WAC9BR,GAAmB,KAClB,IAEH,OAGE,cADA,CACA,OACES,UAAS,iEACJV,IAAoBF,EAAS,cAAgB,iBADzC,aADX,UAKE,mBAAGY,UAAU,eAAeC,KAAK,IAAjC,kBAKA,wBACED,UAAU,iBACVE,KAAK,SACL,cAAY,WACZ,cAAY,uBACZ,gBAAc,sBACd,gBAAc,QACd,aAAW,oBACXC,QAASL,EARX,SAUE,sBAAME,UAAU,0BAIlB,qBAAKA,UAAU,2BAA2BI,GAAG,sBAA7C,SACE,oBAAIJ,UAAU,sCAAd,SACE,oBACEA,UAAU,WACV,cAAY,WACZ,cAAY,wBAHd,SAII,mBACEA,UAAU,gBACVC,KAAK,YACLE,QAAS,WACQV,SAASY,cAAc,aAC/BC,eAAe,CAAEC,SAAU,wB,cCLrCC,MA5Cf,WAIE,OAFAf,SAASgB,MAAQ,WAGf,gCACE,wBAAQT,UAAU,aAAlB,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,UAAf,SACE,qBACEA,UAAU,oIADZ,SAGE,sBAAKA,UAAU,wCAAf,UAEE,oBAAIA,UAAU,2BAAd,2BAIA,mBAAGA,UAAU,0BAAb,+EAIA,mBAAGC,KAAK,6BAA6BD,UAAU,UAA/C,SACE,cAAC,IAAD,CAAiBU,KAAMC,IAAUC,KAAK,SAGxC,mBAAGX,KAAK,8CAA8CD,UAAU,UAAhE,SACE,cAAC,IAAD,CAAiBU,KAAMG,IAAYD,KAAK,oBC1BlCE,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3B,SAAS4B,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aa101eda.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\n\nconst Navbar = (props) => {\n\n  const [isTop, setIsTop] = useState(true);\n  const [isNavbarToggled, setIsNavbarToggled] = useState(false);\n\n  useEffect(() => {\n    document.addEventListener(\"scroll\", () => {\n      const istop = window.scrollY < 20;\n      if (istop !== isTop) {\n        setIsTop(istop);\n      }\n    });\n  }, [isTop]);\n\n  const sendRequest = useCallback(() => {\n    setIsNavbarToggled(true); // Once navbar has been opened, it's always transparent\n  }, [])\n\n  return (\n\n    // Navbar\n    <nav\n      className={`navbar navbar-expand-lg fixed-top navbar-dark\n        ${(isNavbarToggled || !isTop) ? \"transparent\" : \"bg-transparent\"} \n      `}\n    >\n      <a className=\"navbar-brand\" href=\"/\">\n        Home\n      </a>\n\n      {/* Hamburger Menu toggle */}\n      <button\n        className=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarTogglerDemo02\"\n        aria-controls=\"navbarTogglerDemo02\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n        onClick={sendRequest}\n      >\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n\n      {/* Collapsible content */}\n      <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n        <ul className=\"nav navbar-nav mr-auto mt-2 mt-lg-0\">\n          <li \n            className=\"nav-item\"\n            data-toggle=\"collapse\"\n            data-target=\".navbar-collapse.show\">\n              <a \n                className=\"nav-link lead\"\n                href=\"#projects\"\n                onClick={() => {\n                  const anchor = document.querySelector('#projects');\n                  anchor.scrollIntoView({ behavior: 'smooth',});\n                }}>\n                {/* <b>Projects</b> */}\n              </a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;","import React from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\n// import Footer from \"./components/Footer\";\n// import Projects from \"./components/Projects\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\nimport { faLinkedin } from '@fortawesome/free-brands-svg-icons'\n\nfunction App() {\n\n  document.title = \"Homepage\";\n\n  return (\n    <div>\n      <header className=\"App-header\">\n        <Navbar/>\n      </header>\n\n      <div className=\"bgstyle\">\n        <div\n          className=\"title jumbotron jumbotron-fluid bg-transparent text-light min-vh-100 d-flex align-content-center align-items-center flex-wrap m-0\"\n        >\n          <div className=\"container container-fluid text-center\">\n            \n            <h1 className=\"display-1 py-4 name-text\">\n              Hassan Shahid\n            </h1>\n            \n            <p className=\"pb-5 pt-4 mx-4 sub-text\">\n              Computer Science and Physics student at the University of Glasgow\n            </p>\n\n            <a href=\"https://github.com/muhashh\" className=\"fa-link\">\n              <FontAwesomeIcon icon={faGithub} size=\"3x\"/> \n            </a>\n\n            <a href=\"https://www.linkedin.com/in/hassan-shahid0/\" className=\"fa-link\">\n              <FontAwesomeIcon icon={faLinkedin} size=\"3x\"/> \n            </a>\n          </div>\n\n        </div>\n      </div>\n\n      {/* <Projects/> */}\n\n      {/* <Footer/> */}\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}